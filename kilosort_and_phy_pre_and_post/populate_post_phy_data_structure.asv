function data = populate_post_phy_data_structure(animal_dir, animal_data, ToneOnCode, ToneOffCode)

    spt = readNPY(fullfile(animal_dir,'spike_times.npy'));
    cl = readNPY(fullfile(animal_dir, 'spike_clusters.npy'));
    [cids,cgs] = getclustermarkings(animal_dir);
    
    % Get data from spreadsheet that matches clusters to peak electrodes
    result = regexp(animal_dir, 'IG(\w{3})', 'tokens');
    animal_num = result{1}{1};
    electrodes = read_electrode_tsv('/Users/katie/likhtik/data/single_cell_data/peak_electrodes.tsv', animal_num);
    
    data=struct();
    data.rootdir = animal_dir;
    animal = animal_dir(strfind(animal_dir, 'IG'):end);
    data.animal = animal;

    if ismember(animal, {'IG160', 'IG163', 'IG176', 'IG178', 'IG180'})
        data.group = 'control';
    elseif ismember(animal, {'IG154', 'IG156', 'IG158', 'IG177', 'IG179'})
        data.group = 'stressed';
    end

    fieldnames={'noise','MUA','good'};
    
    for a=max(cl)'+1;end
    if ~isempty(spt)
        counts=[1 1 1];
        for a=1:length(cids)
            cluster_id = cids(a) ;
            spike_times=spt(cl==cluster_id);
            data.units.(fieldnames{cgs(a)+1})(counts(cgs(a)+1)).spike_times = spike_times;
            if cgs(a) > 0
                data.units.(fieldnames{cgs(a)+1})(counts(cgs(a)+1)).electrodes = electrodes(cluster_id);
            end
            counts(cgs(a)+1)=counts(cgs(a)+1)+1;
        end
    end
    
    % Find the indices where ToneOn and ToneOff codes occur
    ToneOn = animal_data.NEV.Data.SerialDigitalIO.UnparsedData == ToneOnCode;
    ToneOff = animal_data.NEV.Data.SerialDigitalIO.UnparsedData == ToneOffCode;
    ToneOn_ts = animal_data.NEV.Data.SerialDigitalIO.TimeStamp(ToneOn);
    ToneOff_ts = animal_data.NEV.Data.SerialDigitalIO.TimeStamp(ToneOff);
    
    % Combine ToneOn and ToneOff timestamps and event IDs into a table and sort by time
    events = table([ToneOn_ts(:); ToneOff_ts(:)], [ones(sum(ToneOn), 1); -ones(sum(ToneOff), 1)], 'VariableNames', {'eventTime', 'eventID'});
    events = sortrows(events, {'eventTime'}, {'ascend'});
    
    % Iterate through events and determine whether each ToneOff is valid
    % This is necessary when there are spurious noise events that then trigger the
    % Tone Off code when they are turned off

    tone_on = false;
    valid_ToneOff = false(size(ToneOff));
    for i = 1:height(events)
        if events.eventID(i) == 1 % ToneOn event
            tone_on = true;
        else % ToneOff event
            if tone_on
                valid_ToneOff(i) = true;
                tone_on = false;
            end
        end
    end
    
    % Only keep the valid tone off codes
    ToneOff_ts = events.eventTime(valid_ToneOff);
    
    % Store relevant data in output struct
    data.tone_period_onsets = ToneOn_ts;
    data.tone_period_offsets = ToneOff_ts;

    % Define some constants
    sampling_rate = 30000; % Hz
    period_duration = 30; % seconds
    tones_per_period = period_duration; % there is one tone every second
    
    tone_onsets_expanded = zeros(1, length(data.tone_period_onsets) * tones_per_period);
    for j = 1:length(data.tone_period_onsets)
        start_of_period = data.tone_onsets(j);
        starts_of_tones = (start_of_period:1*sampling_rate:(tones_per_period-1)*sampling_rate+start_of_period);
        tone_onsets_expanded((j-1)*tones_per_period+1:(j-1)*tones_per_period+30) = starts_of_tones;
    end
    data.tone_onsets_expanded = tone_onsets_expanded;


end

function cluster_electrode_map = read_electrode_tsv(filepath, animal)
    % Read TSV file
    opts = detectImportOptions(filepath, 'Delimiter', '\t', 'FileType', 'text');
    opts.VariableNamesLine = 1;
    opts.VariableTypes = {'string', 'double', 'string', 'string'};
    data = readtable(filepath, opts);
    
    % Filter rows based on the input animal
    filtered_data = data(strcmp(data.Animal, animal), :);
    
    % Create the containers.Map object
    cluster_electrode_map = containers.Map('KeyType', 'double', 'ValueType', 'any');
    
    % Iterate over the filtered data rows and populate the map
    for i = 1:height(filtered_data)
        cluster = double(filtered_data.Cluster(i));
        electrodes_str = filtered_data.Electrodes{i};
        electrodes = sort(str2double(split(electrodes_str, ',')));
        
        % Add the struct to the map with the cluster number as the key
        cluster_electrode_map(cluster) = electrodes;
    end
end

